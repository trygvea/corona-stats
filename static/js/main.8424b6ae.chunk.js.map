{"version":3,"sources":["utils/fetch-util.js","utils/number-util.ts","data/population.ts","pages/PerCountryPageLoader.tsx","utils/array-util.ts","utils/string-util.ts","components/Minigraph.tsx","components/ProgressBar.tsx","components/CountryHover.tsx","components/PerCountryTableRow.tsx","hooks/hover.js","types/Corona.ts","components/PerCountryTable.tsx","components/SearchPropsForm.tsx","pages/PerCountryPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["verify","res","ok","contentType","headers","get","indexOf","json","then","Promise","reject","Error","statusText","resolve","toJson","toCsv","text","rows","split","map","row","sum","arr","reduce","agg","v","populationUrl","ALTERNATE_COUNTRY_NAMES","Brunei","Bahamas","Congo","Egypt","Eritrea","Gambia","Iran","Kyrgyzstan","Laos","Macedonia","Russia","Slovakia","Syria","Timor","Venezuela","lastYearsPopulation","worldPopulation","country","lastYearKey","Object","keys","slice","Country","population","a","fetch","urls","transformCovidCases","csv","firstRow","data","countries","rowsWithData","filter","length","_","c","r","dates","valuesPerCountry","i","values","stringValue","parseInt","name","date","j","value","maxValue","Math","max","total","addPopulation","timeline","populationData","decorated","countryData","countryName","_findPop","find","alternateName","undefined","findPopulation","totalPerCapita","merged","countriesWithoutPopulation","console","warn","verifyPopulation","usePageLoader","useState","setPopulationData","newDeaths","setNewDeaths","useEffect","fetchWorldPopulation","useMemo","Minigraph","barWidth","prefixText","lastValue","graphWidth","className","style","width","key","title","marginRight","height","ProgressBar","progress","CountryHover","n","Intl","NumberFormat","notation","compactDisplay","format","PerCountryTableRow","maxPerCapita","setValue","handleMouseOver","useCallback","handleMouseOut","ref","useRef","node","current","removeEventListener","addEventListener","useHover","rowRef","isHovered","searchProps","useContext","PerCountryPageContext","deathsTotal","acc","val","push","round","showDeathsTotal","showDeathsNew","PerCountryTable","sort","b","hideTinyCountries","SearchPropsDefault","SearchPropsForm","updateSearchProps","onCloseDrawer","updateProp","prop","e","Item","label","checked","onChange","React","createContext","PerCountryPage","drawerVisible","setDrawerVisible","setSearchProps","lastLoaded","Provider","href","target","rel","src","alt","type","onClick","placement","closable","onClose","visible","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8424b6ae.chunk.js","sourcesContent":["export const verify = res => {\n    if (!res.ok) {\n        const contentType = res.headers.get('content-type')\n        if (contentType?.indexOf('application/json') !== -1) {\n            return res.json().then(\n                json => {\n                    return Promise.reject(new Error(res.statusText))\n                },\n                () => Promise.reject(new Error(res.statusText))\n            )\n        }\n        return Promise.reject(new Error(res.statusText))\n    }\n    return Promise.resolve(res)\n}\n\nexport const toJson = res => {\n    return verify(res).then(res => res.json())\n}\n\nexport const toCsv = res => {\n    return verify(res).then(res => res.text()).then(rows => rows.split('\\n').map(row => row.split(',')))\n}\n","export const sum = (arr: number[]): number => arr.reduce((agg, v) => (agg += v), 0)\n","import { toJson } from '../utils/fetch-util'\nimport { Population } from '../types/Corona'\n\n// NOTE: This service seems to have political issues. For instance it seems to have noe entries for Palestine or Taiwan.\n\n// https://datahub.io/JohnSnowLabs/population-figures-by-country\nconst populationUrl =\n    'https://pkgstore.datahub.io/JohnSnowLabs/population-figures-by-country/population-figures-by-country-csv_json/data/2159fad77778c3b584f3d396593e0af6/population-figures-by-country-csv_json.json'\n\nconst ALTERNATE_COUNTRY_NAMES: { [key: string]: string } = {\n    Brunei: 'Brunei Darussalam',\n    Bahamas: 'Bahamas, The',\n    Congo: 'Congo, Rep.',\n    'Cape Verde': 'Cabo Verde',\n    'Democratic Republic of Congo': 'Congo, Dem. Rep.',\n    Egypt: 'Egypt, Arab Rep.',\n    Eritrea: 'Eritrea',\n    'Faeroe Islands': 'Faroe Islands',\n    Gambia: 'Gambia, The',\n    Iran: 'Iran, Islamic Rep.',\n    Kyrgyzstan: 'Kyrgyz Republic',\n    Laos: 'Lao PDR',\n    Macedonia: 'Macedonia, FYR',\n    Russia: 'Russian Federation',\n    'Saint Kitts and Nevis': 'St. Kitts and Nevis',\n    'Saint Lucia': 'St. Lucia',\n    'Saint Vincent and the Grenadines': 'St. Vincent and the Grenadines',\n    Slovakia: 'Slovak Republic',\n    'South Korea': 'Korea, Dem. People’s Rep.',\n    Syria: 'Syrian Arab Republic',\n    Timor: 'Timor-Leste',\n    Venezuela: 'Venezuela, RB',\n    'United States Virgin Islands': 'Virgin Islands (U.S.)',\n}\n\n/**\n * Transform world population from weird json struct to local data structure\n */\nconst lastYearsPopulation = (worldPopulation: any): Population[] =>\n    worldPopulation.map((country: any) => {\n        const lastYearKey = Object.keys(country).slice(-1)[0]\n        return {\n            country: country.Country,\n            population: country[lastYearKey],\n        }\n    })\n\nexport async function fetchWorldPopulation(): Promise<Population[]> {\n    return fetch(populationUrl).then(toJson).then(lastYearsPopulation)\n}\n\nexport const findPopulation = (countryName: string, populationData: Population[]): Population | undefined => {\n    const _findPop = (countryName: string) => populationData.find(({ country }) => country === countryName)\n    const population = _findPop(countryName)\n    if (population) {\n        return population\n    }\n    const alternateName = ALTERNATE_COUNTRY_NAMES[countryName]\n    return alternateName ? _findPop(alternateName) : undefined\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport './PerCountryPage.scss'\nimport { toCsv } from '../utils/fetch-util'\nimport { Population, CountryData, Timeline } from '../types/Corona'\nimport { transpose } from '../utils/array-util'\nimport { sum } from '../utils/number-util'\nimport { toNumberOrZero } from '../utils/string-util'\nimport { fetchWorldPopulation, findPopulation } from '../data/population'\n\nconst urls = {\n    populationPerCountry:\n        'https://pkgstore.datahub.io/JohnSnowLabs/population-figures-by-country/population-figures-by-country-csv_json/data/2159fad77778c3b584f3d396593e0af6/population-figures-by-country-csv_json.json',\n    covidNewDeaths: 'https://covid.ourworldindata.org/data/ecdc/new_deaths.csv',\n    covidNewCases: 'https://covid.ourworldindata.org/data/ecdc/new_cases.csv',\n}\n\n/**\n * Transform corona data from csv file to local data structure\n */\nconst transformCovidCases = (csv: string[][]): Timeline[] => {\n    const [firstRow, ...data] = csv\n    const [, ...countries] = firstRow\n    const rowsWithData = data.filter((row) => row.length > 1)\n    const [dates, ...valuesPerCountry] = transpose(rowsWithData)\n\n    return countries\n        .map((country, i) => {\n            const values = valuesPerCountry[i].map((stringValue) => toNumberOrZero(stringValue))\n            return {\n                name: country,\n                values: dates.map((date, j) => ({\n                    date,\n                    value: values[j],\n                })),\n                maxValue: Math.max(...values),\n                total: sum(values),\n            }\n        })\n        .filter((c) => c.maxValue > 0)\n}\n\nconst verifyPopulation = (merged: CountryData[], populationData: Population[]): void => {\n    const countriesWithoutPopulation = merged.filter((c) => !c.population)\n    if (countriesWithoutPopulation.length > 0) {\n        console.warn(\n            'No population found for the following countries:',\n            countriesWithoutPopulation.map((c) => c.name)\n        )\n        // console.warn(\n        //     'You can fix this problem by making a mapping to one of theses:',\n        //     populationData.map((c) => c.country)\n        // )\n    }\n}\n\nconst addPopulation = (timeline: Timeline[], populationData: Population[]): CountryData[] => {\n    const decorated = timeline.map((countryData) => {\n        const population = findPopulation(countryData.name, populationData)\n        return {\n            ...countryData,\n            population: population?.population,\n            totalPerCapita: population?.population ? countryData.total / population.population : 0,\n        }\n    })\n    verifyPopulation(decorated, populationData)\n    return decorated\n}\n\nexport const usePageLoader = (): CountryData[] => {\n    const [populationData, setPopulationData] = useState<Population[]>([])\n    const [newDeaths, setNewDeaths] = useState<Timeline[]>([])\n\n    useEffect(() => {\n        fetchWorldPopulation().then(setPopulationData)\n    }, [])\n\n    useEffect(() => {\n        fetch(urls.covidNewDeaths).then(toCsv).then(transformCovidCases).then(setNewDeaths)\n    }, [])\n\n    return useMemo(() => {\n        return addPopulation(newDeaths, populationData)\n    }, [populationData, newDeaths])\n}\n","export const transpose = <T>(arr: Array<T>[]): Array<T>[] => arr[0].map((_, c) => arr.map((r) => r[c]))\n\nexport const last = <T>(arr: Array<T>): T | undefined => (arr.length > 0 ? arr[arr.length - 1] : undefined)\n","import { Integer } from '../types/Types'\n\nexport const toNumberOrZero = (s?: string): Integer => parseInt(s || '0')\n","import React from 'react'\nimport { TimelineEntry } from '../types/Corona'\nimport './Minigraph.scss'\nimport { Integer } from '../types/Types'\n\nconst Minigraph: React.FC<{ timeline: TimelineEntry[]; barWidth?: Integer; prefixText?: string }> = ({\n    timeline,\n    barWidth = 3,\n    prefixText,\n}) => {\n    const maxValue = Math.max(...timeline.map((v) => v.value))\n    const lastValue = timeline[timeline.length - 1]\n    const barBorder = 1\n    const graphHeight = 40\n    const graphWidth = timeline.length * (barWidth + barBorder)\n\n    return (\n        <div className=\"minigraph\">\n            <div className=\"bars\" style={{ width: graphWidth }}>\n                {timeline.map(({ date, value }) => (\n                    <div key={date} className=\"date\" title={`${date}: ${value}`} style={{ marginRight: barBorder }}>\n                        <div className=\"bar\" style={{ height: maxValue ? (value / maxValue) * graphHeight : 0 }} />\n                    </div>\n                ))}\n            </div>\n            <div className=\"legend\">\n                {prefixText}\n                <span className=\"value\">{lastValue.value}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Minigraph\n","import React from 'react'\nimport './ProgressBar.scss'\nimport { Integer } from '../types/Types'\n\nconst ProgressBar: React.FC<{ width: Integer; progress: number }> = ({ width, progress }) => {\n    return (\n        <div className=\"progressbar\" style={{ width }}>\n            <div className=\"progress\" style={{ width: `${progress * 100}%` }} />\n        </div>\n    )\n}\n\nexport default ProgressBar\n","import React from 'react'\nimport { CountryData } from '../types/Corona'\nimport { Integer } from '../types/Types'\n\nconst formatCompact = (n?: Integer): string => {\n    if (!n) {\n        return 'unknown'\n    }\n    // @ts-ignore\n    return new Intl.NumberFormat('en-GB', { notation: 'compact', compactDisplay: 'short' }).format(n)\n}\n\nconst CountryHover: React.FC<{ country: CountryData }> = ({ country }) => {\n    return (\n        <div className=\"country-hover\">\n            <span className=\"foo\">Population: {formatCompact(country.population)}</span>\n            {/*,{' '}<span className=\"foo\">Total deaths: {formatCompact(country.total)}</span>*/}\n        </div>\n    )\n}\n\nexport default CountryHover\n","import React, { useContext, useMemo } from 'react'\nimport Minigraph from './Minigraph'\nimport ProgressBar from './ProgressBar'\nimport { accumulateTotals, CountryData, TimelineEntry } from '../types/Corona'\nimport { useHover } from '../hooks/hover'\nimport CountryHover from './CountryHover'\nimport { PerCountryPageContext } from '../pages/PerCountryPage'\n\nconst numCols = 40\n\nconst PerCountryTableRow: React.FC<{ country: CountryData; maxPerCapita: number }> = ({ country, maxPerCapita }) => {\n    const [rowRef, isHovered] = useHover()\n    const searchProps = useContext(PerCountryPageContext)\n\n    const deathsTotal = useMemo<TimelineEntry[]>(() => accumulateTotals(country.values), [country])\n\n    return (\n        <tr\n            // @ts-ignore\n            ref={rowRef}\n            title={`Total: ${country.total}, per million: ${Math.round((country.totalPerCapita || 0) * 1e6)}`}\n        >\n            <td className=\"country-name\">\n                {country.name}\n                {isHovered && <CountryHover country={country} />}\n            </td>\n            <td className=\"deaths-per-capita prl\">\n                {country.population ? (\n                    <div className=\"deaths-per-capita-bar\">\n                        <ProgressBar width={100} progress={country.totalPerCapita / maxPerCapita} />\n                        <div className=\"progressbar-overlay\">{Math.round(country.totalPerCapita * 1e6)}</div>\n                    </div>\n                ) : (\n                    <div className=\"info-small\">No population data</div>\n                )}\n            </td>\n            {searchProps.showDeathsTotal && (\n                <td>\n                    <Minigraph timeline={deathsTotal.slice(-numCols)} barWidth={3} />\n                </td>\n            )}\n            {searchProps.showDeathsNew && (\n                <td>\n                    <Minigraph timeline={country.values.slice(-numCols)} barWidth={3} prefixText={'+'} />\n                </td>\n            )}\n        </tr>\n    )\n}\n\nexport default PerCountryTableRow\n","// Copied from https://gist.github.com/gragland/a32d08580b7e0604ff02cb069826ca2f\nimport { useRef, useState, useCallback } from 'react'\n\nexport const useHover = () => {\n    const [value, setValue] = useState(false)\n\n    // Wrap in useCallback so we can use in dependencies below\n    const handleMouseOver = useCallback(() => setValue(true), [])\n    const handleMouseOut = useCallback(() => setValue(false), [])\n\n    // Keep track of the last node passed to callbackRef\n    // so we can remove its event listeners.\n    const ref = useRef()\n\n    // Use a callback ref instead of useEffect so that event listeners\n    // get changed in the case that the returned ref gets added to\n    // a different element later. With useEffect, changes to ref.current\n    // wouldn't cause a rerender and thus the effect would run again.\n    const callbackRef = useCallback(\n        (node) => {\n            if (ref.current) {\n                ref.current.removeEventListener('mouseover', handleMouseOver)\n                ref.current.removeEventListener('mouseout', handleMouseOut)\n            }\n\n            if (node) {\n                node.addEventListener('mouseover', handleMouseOver)\n                node.addEventListener('mouseout', handleMouseOut)\n            }\n        },\n        [handleMouseOver, handleMouseOut]\n    )\n\n    return [callbackRef, value]\n}\n","import { Integer, ISODate } from './Types'\n\nexport interface Population {\n    country: string\n    population: Integer\n    year: Integer\n}\n\nexport interface TimelineEntry {\n    date: ISODate\n    value: number\n}\n\nexport interface Timeline {\n    name: string\n    values: TimelineEntry[]\n    maxValue: number\n    total: number\n}\n\nexport interface CountryData extends Timeline {\n    population?: Integer\n    totalPerCapita: number\n}\n\nexport const accumulateTotals = (values: TimelineEntry[]): TimelineEntry[] =>\n    values.reduce<TimelineEntry[]>((acc, val, i) => {\n        if (i === 0) {\n            acc.push(val)\n        } else {\n            acc.push({ ...val, value: acc[i - 1].value + val.value })\n        }\n        return acc\n    }, [])\n","import React, { useContext } from 'react'\nimport { CountryData } from '../types/Corona'\nimport './PerCountryTable.scss'\nimport PerCountryTableRow from './PerCountryTableRow'\nimport { PerCountryPageContext } from '../pages/PerCountryPage'\n\nconst PerCountryTable: React.FC<{ countryData: CountryData[] }> = ({ countryData }) => {\n    const maxPerCapita = Math.max(...countryData.map((c) => c.totalPerCapita || 0))\n\n    const searchProps = useContext(PerCountryPageContext)\n\n    const countryFilter = (country: CountryData): boolean => {\n        if (searchProps.hideTinyCountries && (country.population || 0) < 200000) {\n            return false\n        }\n        return true\n    }\n\n    return (\n        <table className=\"countries mtl\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>Total Deaths</th>\n                    {searchProps.showDeathsTotal && <th className=\"align-right\">Deaths</th>}\n                    {searchProps.showDeathsNew && <th className=\"align-right\">Deaths</th>}\n                </tr>\n                <tr>\n                    <th>Location</th>\n                    <th>per mill capita</th>\n                    {searchProps.showDeathsTotal && <th className=\"align-right\">total</th>}\n                    {searchProps.showDeathsNew && <th className=\"align-right\">new</th>}\n                </tr>\n            </thead>\n            <tbody>\n                {countryData\n                    .sort((a, b) => b.totalPerCapita - a.totalPerCapita)\n                    .filter(countryFilter)\n                    .map((country) => (\n                        <PerCountryTableRow key={country.name} country={country} maxPerCapita={maxPerCapita} />\n                    ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default PerCountryTable\n","import React, { useContext } from 'react'\nimport { Form, Switch } from 'antd'\nimport { PerCountryPageContext } from '../pages/PerCountryPage'\n\nexport const SearchPropsDefault = {\n    hideTinyCountries: false,\n    showDeathsNew: true,\n    showDeathsTotal: false,\n}\n\nexport type SearchProps = typeof SearchPropsDefault\n\nconst SearchPropsForm: React.FC<{\n    updateSearchProps: (p: SearchProps) => void\n    onCloseDrawer?: () => void\n}> = ({ updateSearchProps, onCloseDrawer = () => {} }) => {\n    const searchProps = useContext(PerCountryPageContext)\n    const updateProp = (prop: keyof SearchProps) => (e: SearchProps[keyof SearchProps]) => {\n        onCloseDrawer()\n        updateSearchProps({ ...searchProps, ...{ [prop]: e } })\n    }\n\n    return (\n        <Form>\n            <Form.Item label=\"Hide tiny countries\">\n                <Switch checked={searchProps.hideTinyCountries} onChange={updateProp('hideTinyCountries')} />\n            </Form.Item>\n            <Form.Item label=\"Show new deaths per day\">\n                <Switch checked={searchProps.showDeathsNew} onChange={updateProp('showDeathsNew')} />\n            </Form.Item>\n            <Form.Item label=\"Show total deaths per day\">\n                <Switch checked={searchProps.showDeathsTotal} onChange={updateProp('showDeathsTotal')} />\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default SearchPropsForm\n","import React, { useState } from 'react'\nimport './PerCountryPage.scss'\nimport { usePageLoader } from './PerCountryPageLoader'\nimport PerCountryTable from '../components/PerCountryTable'\nimport { Button, Drawer } from 'antd'\nimport SearchPropsForm, { SearchProps, SearchPropsDefault } from '../components/SearchPropsForm'\nimport { last } from '../utils/array-util'\n\nexport const PerCountryPageContext = React.createContext(SearchPropsDefault)\n\nconst PerCountryPage = () => {\n    const countryData = usePageLoader()\n    const [drawerVisible, setDrawerVisible] = useState<boolean>(false)\n    const [searchProps, setSearchProps] = useState<SearchProps>(SearchPropsDefault)\n\n    const lastLoaded = countryData.length > 0 && last(countryData[0].values)?.date\n\n    const onCloseDrawer = () => setDrawerVisible(false)\n\n    return (\n        <PerCountryPageContext.Provider value={searchProps}>\n            <div className=\"per-country-page-header pll\">\n                <h1 className=\"mbs\">Coronavirus - deaths per capita</h1>\n                <div className=\"github-source mam\">\n                    <a href=\"https://github.com/trygvea/corona-stats\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        Source on <img src=\"corona-stats/GitHub-Mark-32px.png\" height={24} alt=\"github\"></img>\n                        <img src=\"corona-stats/GitHub_Logo.png\" height={24} alt=\"github\"></img>\n                    </a>\n                </div>\n            </div>\n\n            <div className=\"per-country-page mll mtm\">\n                <p className=\"info-text\">\n                    There are many small countries that are hit much harder than the big countries. This graph shows\n                    coronavirus cases per country ordered per capita.\n                </p>\n\n                <p className=\"info-small mbxs\">\n                    Using data from{' '}\n                    <a href=\"https://ourworldindata.org/coronavirus-source-data\">\n                        ourworldindata.org/coronavirus-source-data\n                    </a>{' '}\n                    and{' '}\n                    <a href=\"https://datahub.io/JohnSnowLabs/population-figures-by-country\">datahub.io/JohnSnowLabs</a>.\n                    <br />\n                    New data from the day before are present every day at 13:00 CET, according to{' '}\n                    <a href=\"https://ourworldindata.org/coronavirus\">ourworldindata.org/coronavirus</a>\n                    <br />\n                    {lastLoaded && `This data was loaded ${lastLoaded}`}\n                </p>\n\n                <Button type=\"primary\" onClick={() => setDrawerVisible(true)}>\n                    Configure\n                </Button>\n                <Drawer\n                    title=\"Search details\"\n                    placement=\"left\"\n                    closable={true}\n                    onClose={onCloseDrawer}\n                    visible={drawerVisible}\n                    width={300}\n                >\n                    <SearchPropsForm updateSearchProps={setSearchProps} onCloseDrawer={onCloseDrawer} />\n                </Drawer>\n\n                <PerCountryTable countryData={countryData} />\n            </div>\n        </PerCountryPageContext.Provider>\n    )\n}\n\nexport default PerCountryPage\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport PerCountryPage from './pages/PerCountryPage'\n\nconst App = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\">\n                <PerCountryPage />\n            </Route>\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}