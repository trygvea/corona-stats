{"version":3,"sources":["components/Minigraph.tsx","components/ProgressBar.tsx","utils/fetch-util.js","utils/number-util.ts","data/population.ts","components/pages/PerCountryPageLoader.tsx","utils/array-util.ts","utils/string-util.ts","components/pages/PerCountryPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Minigraph","timeline","maxValue","Math","max","map","v","value","className","date","key","title","style","height","ProgressBar","width","progress","verify","res","ok","contentType","headers","get","indexOf","json","then","Promise","reject","Error","statusText","resolve","toJson","toCsv","text","rows","split","row","sum","arr","reduce","agg","populationUrl","ALTERNATE_COUNTRY_NAMES","Brunei","Bahamas","Congo","Egypt","Eritrea","Gambia","Iran","Kyrgyzstan","Laos","Macedonia","Russia","Slovakia","Syria","Timor","Venezuela","lastYearsPopulation","worldPopulation","country","lastYearKey","Object","keys","slice","Country","population","a","fetch","urls","transformCovidCases","csv","firstRow","data","countries","rowsWithData","filter","length","_","c","r","dates","valuesPerCountry","i","values","stringValue","parseInt","name","j","total","addPopulation","populationData","decorated","countryData","countryName","_findPop","find","alternateName","undefined","findPopulation","totalPerCapita","merged","countriesWithoutPopulation","console","warn","verifyPopulation","usePageLoader","useState","setPopulationData","deathCases","setDeathCases","useEffect","fetchWorldPopulation","useMemo","PerCountryPage","maxPerCapita","href","sort","b","round","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d8404db.chunk.js","sourcesContent":["import React from 'react'\nimport { TimelineEntry } from '../model/Corona'\nimport './Minigraph.scss'\n\nconst Minigraph: React.FC<{ timeline: TimelineEntry[] }> = ({ timeline }) => {\n    const maxValue = Math.max(...timeline.map((v) => v.value))\n    return (\n        <div className=\"minigraph\">\n            {timeline.map(({ date, value }) => (\n                <div key={date} className=\"date\" title={`${date}: ${value}`}>\n                    <div className=\"bar\" style={{ height: maxValue ? (value / maxValue) * 30 : 0 }}></div>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Minigraph\n","import React from 'react'\nimport './ProgressBar.scss'\n\nconst ProgressBar: React.FC<{ width: number; progress: number }> = ({ width, progress }) => {\n    return (\n        <div className=\"progressbar\" style={{ width }}>\n            <div className=\"progress\" style={{ width: `${progress * 100}%` }} />\n        </div>\n    )\n}\n\nexport default ProgressBar\n","export const verify = res => {\n    if (!res.ok) {\n        const contentType = res.headers.get('content-type')\n        if (contentType?.indexOf('application/json') !== -1) {\n            return res.json().then(\n                json => {\n                    return Promise.reject(new Error(res.statusText))\n                },\n                () => Promise.reject(new Error(res.statusText))\n            )\n        }\n        return Promise.reject(new Error(res.statusText))\n    }\n    return Promise.resolve(res)\n}\n\nexport const toJson = res => {\n    return verify(res).then(res => res.json())\n}\n\nexport const toCsv = res => {\n    return verify(res).then(res => res.text()).then(rows => rows.split('\\n').map(row => row.split(',')))\n}\n","export const sum = (arr: number[]): number => arr.reduce((agg, v) => (agg += v), 0)\n","import { toJson } from '../utils/fetch-util'\nimport { Population } from '../model/Corona'\n\n// NOTE: This service seems to have political issues. For instance it seems to have noe entries for Palestine or Taiwan.\n\n// https://datahub.io/JohnSnowLabs/population-figures-by-country\nconst populationUrl =\n    'https://pkgstore.datahub.io/JohnSnowLabs/population-figures-by-country/population-figures-by-country-csv_json/data/2159fad77778c3b584f3d396593e0af6/population-figures-by-country-csv_json.json'\n\nconst ALTERNATE_COUNTRY_NAMES: { [key: string]: string } = {\n    Brunei: 'Brunei Darussalam',\n    Bahamas: 'Bahamas, The',\n    Congo: 'Congo, Rep.',\n    'Cape Verde': 'Cabo Verde',\n    'Democratic Republic of Congo': 'Congo, Dem. Rep.',\n    Egypt: 'Egypt, Arab Rep.',\n    Eritrea: 'Eritrea',\n    'Faeroe Islands': 'Faroe Islands',\n    Gambia: 'Gambia, The',\n    Iran: 'Iran, Islamic Rep.',\n    Kyrgyzstan: 'Kyrgyz Republic',\n    Laos: 'Lao PDR',\n    Macedonia: 'Macedonia, FYR',\n    Russia: 'Russian Federation',\n    'Saint Kitts and Nevis': 'St. Kitts and Nevis',\n    'Saint Lucia': 'St. Lucia',\n    'Saint Vincent and the Grenadines': 'St. Vincent and the Grenadines',\n    Slovakia: 'Slovak Republic',\n    'South Korea': 'Korea, Dem. Peopleâ€™s Rep.',\n    Syria: 'Syrian Arab Republic',\n    Timor: 'Timor-Leste',\n    Venezuela: 'Venezuela, RB',\n    'United States Virgin Islands': 'Virgin Islands (U.S.)',\n}\n\n/**\n * Transform world population from weird json struct to local data structure\n */\nconst lastYearsPopulation = (worldPopulation: any): Population[] =>\n    worldPopulation.map((country: any) => {\n        const lastYearKey = Object.keys(country).slice(-1)[0]\n        return {\n            country: country.Country,\n            population: country[lastYearKey],\n        }\n    })\n\nexport async function fetchWorldPopulation(): Promise<Population[]> {\n    return fetch(populationUrl).then(toJson).then(lastYearsPopulation)\n}\n\nexport const findPopulation = (countryName: string, populationData: Population[]): Population | undefined => {\n    const _findPop = (countryName: string) => populationData.find(({ country }) => country === countryName)\n    const population = _findPop(countryName)\n    if (population) {\n        return population\n    }\n    const alternateName = ALTERNATE_COUNTRY_NAMES[countryName]\n    return alternateName ? _findPop(alternateName) : undefined\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport './PerCountryPage.scss'\nimport { toCsv } from '../../utils/fetch-util'\nimport { Population, CountryData, Timeline } from '../../model/Corona'\nimport { transpose } from '../../utils/array-util'\nimport { sum } from '../../utils/number-util'\nimport { toNumberOrZero } from '../../utils/string-util'\nimport { fetchWorldPopulation, findPopulation } from '../../data/population'\n\nconst urls = {\n    populationPerCountry:\n        'https://pkgstore.datahub.io/JohnSnowLabs/population-figures-by-country/population-figures-by-country-csv_json/data/2159fad77778c3b584f3d396593e0af6/population-figures-by-country-csv_json.json',\n    covidDeathCases: 'https://covid.ourworldindata.org/data/ecdc/new_deaths.csv',\n}\n\n/**\n * Transform corona data from csv file to local data structure\n */\nconst transformCovidCases = (csv: string[][]): Timeline[] => {\n    const [firstRow, ...data] = csv\n    const [, ...countries] = firstRow\n    const rowsWithData = data.filter((row) => row.length > 1)\n    const [dates, ...valuesPerCountry] = transpose(rowsWithData)\n\n    return countries\n        .map((country, i) => {\n            const values = valuesPerCountry[i].map((stringValue) => toNumberOrZero(stringValue))\n            return {\n                name: country,\n                values: dates.map((date, j) => ({\n                    date,\n                    value: values[j],\n                })),\n                maxValue: Math.max(...values),\n                total: sum(values),\n            }\n        })\n        .filter((c) => c.maxValue > 0)\n}\n\nconst verifyPopulation = (merged: CountryData[], populationData: Population[]): void => {\n    const countriesWithoutPopulation = merged.filter((c) => !c.population)\n    if (countriesWithoutPopulation.length > 0) {\n        console.warn(\n            'No population found for the following countries:',\n            countriesWithoutPopulation.map((c) => c.name)\n        )\n        console.warn(\n            'You can fix this problem by making a mapping to one of theses:',\n            populationData.map((c) => c.country)\n        )\n    }\n}\n\nconst addPopulation = (timeline: Timeline[], populationData: Population[]): CountryData[] => {\n    const decorated = timeline.map((countryData) => {\n        const population = findPopulation(countryData.name, populationData)\n        return {\n            ...countryData,\n            population: population?.population,\n            totalPerCapita: population?.population ? countryData.total / population.population : 0,\n        }\n    })\n    verifyPopulation(decorated, populationData)\n    return decorated\n}\n\nexport const usePageLoader = (): CountryData[] => {\n    const [populationData, setPopulationData] = useState<Population[]>([])\n    const [deathCases, setDeathCases] = useState<Timeline[]>([])\n\n    useEffect(() => {\n        fetchWorldPopulation().then(setPopulationData)\n    }, [])\n\n    useEffect(() => {\n        fetch(urls.covidDeathCases).then(toCsv).then(transformCovidCases).then(setDeathCases)\n    }, [])\n\n    return useMemo(() => {\n        return addPopulation(deathCases, populationData)\n    }, [populationData, deathCases])\n}\n","export const transpose = <T>(arr: Array<T>[]): Array<T>[] => arr[0].map((_, c) => arr.map((r) => r[c]))\n","export const toNumberOrZero = (s?: string): number => parseInt(s || '0')\n","import React from 'react'\nimport './PerCountryPage.scss'\nimport Minigraph from '../Minigraph'\nimport ProgressBar from '../ProgressBar'\nimport { usePageLoader } from './PerCountryPageLoader'\n\nconst PerCountryPage = () => {\n    const data = usePageLoader()\n    const maxPerCapita = Math.max(...data.map((c) => c.totalPerCapita || 0))\n\n    return (\n        <div className=\"mll\">\n            <h1>Corona virus - deaths per capita</h1>\n\n            <div>\n                With data from <a href=\"https://ourworldindata.org/coronavirus\">ourworldindata.org/coronavirus</a>{' '}\n                &nbsp; and{' '}\n                <a href=\"https://datahub.io/JohnSnowLabs/population-figures-by-country\">datahub.io/JohnSnowLabs</a>.\n            </div>\n\n            <table className=\"countries mtl\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Total Deaths</th>\n                        <th>Deaths</th>\n                    </tr>\n                    <tr>\n                        <th>Location</th>\n                        <th>per capita</th>\n                        <th>per day</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data\n                        .sort((a, b) => b.totalPerCapita - a.totalPerCapita)\n                        .map((country) => (\n                            <tr\n                                key={country.name}\n                                className=\"country\"\n                                title={`Total: ${country.total}, per million: ${Math.round(\n                                    (country.totalPerCapita || 0) * 1e6\n                                )}`}\n                            >\n                                <td className=\"country-name\">{country.name}</td>\n                                <td className=\"deaths-per-capita prl\">\n                                    {country.population ? (\n                                        <ProgressBar width={100} progress={country.totalPerCapita / maxPerCapita} />\n                                    ) : (\n                                        'No data for population found'\n                                    )}\n                                </td>\n                                <td>\n                                    <Minigraph timeline={country.values.slice(-44)} />\n                                </td>\n                            </tr>\n                        ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default PerCountryPage\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\"\nimport PerCountryPage from \"./components/pages/PerCountryPage\"\n\nconst App = () => (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\">\n          <PerCountryPage />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}