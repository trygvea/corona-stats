{"version":3,"sources":["utils/fetch-util.js","types/Corona.ts","utils/number-util.ts","data/population.ts","pages/PerCountryPageLoader.tsx","utils/array-util.ts","utils/string-util.ts","components/Minigraph.tsx","components/ProgressBar.tsx","components/CountryHover.tsx","components/PerCountryTableRow.tsx","hooks/hover.js","components/PerCountryTable.tsx","components/SearchPropsForm.tsx","pages/PerCountryPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["verify","res","ok","contentType","headers","get","indexOf","json","then","Promise","reject","Error","statusText","resolve","toJson","toCsv","text","rows","split","map","row","EmptyTimeline","values","maxValue","total","accumulateTotals","reduce","acc","val","i","push","value","sum","arr","agg","v","populationUrl","ALTERNATE_COUNTRY_NAMES","Brunei","Bahamas","Congo","Egypt","Eritrea","Gambia","Iran","Kyrgyzstan","Laos","Macedonia","Russia","Slovakia","Syria","Timor","Venezuela","lastYearsPopulation","worldPopulation","country","lastYearKey","Object","keys","slice","Country","population","a","fetch","urls","transformCovidCases","csv","firstRow","data","countries","rowsWithData","filter","length","_","c","r","dates","valuesPerCountry","stringValue","parseInt","countryName","date","j","Math","max","mergeData","populationData","newDeaths","newCases","decorated","countryDeaths","_findPop","find","alternateName","undefined","findPopulation","countryCases","name","deaths","totalPerCapita","cases","merged","countriesWithoutPopulation","console","warn","verifyPopulation","usePageLoader","useState","setPopulationData","setNewDeaths","setNewCases","useEffect","fetchWorldPopulation","useMemo","Minigraph","timeline","barWidth","prefixText","graphClass","lastValue","graphWidth","className","style","width","key","title","marginRight","height","ProgressBar","progress","CountryHover","n","Intl","NumberFormat","notation","compactDisplay","format","PerCountryTableRow","maxDeathsPerCapita","setValue","handleMouseOver","useCallback","handleMouseOut","ref","useRef","node","current","removeEventListener","addEventListener","useHover","rowRef","isHovered","searchProps","useContext","PerCountryPageContext","deathsTotal","casesTotal","numCols","numHistoryDays","round","showCasesTotal","showCasesNew","showDeathsTotal","showDeathsNew","PerCountryTable","countryData","countryFilter","hideTinyCountries","countrySorter","b","showWorldFirst","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","sort","SearchPropsDefault","SearchPropsForm","updateSearchProps","onCloseDrawer","updateProp","prop","Item","label","checked","onChange","min","type","onClick","React","createContext","PerCountryPage","drawerVisible","setDrawerVisible","setSearchProps","lastLoaded","Provider","href","target","rel","src","alt","placement","closable","onClose","visible","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e98d0f43.chunk.js","sourcesContent":["export const verify = res => {\n    if (!res.ok) {\n        const contentType = res.headers.get('content-type')\n        if (contentType?.indexOf('application/json') !== -1) {\n            return res.json().then(\n                json => {\n                    return Promise.reject(new Error(res.statusText))\n                },\n                () => Promise.reject(new Error(res.statusText))\n            )\n        }\n        return Promise.reject(new Error(res.statusText))\n    }\n    return Promise.resolve(res)\n}\n\nexport const toJson = res => {\n    return verify(res).then(res => res.json())\n}\n\nexport const toCsv = res => {\n    return verify(res).then(res => res.text()).then(rows => rows.split('\\n').map(row => row.split(',')))\n}\n","import { Integer, ISODate } from './Types'\n\nexport interface Population {\n    country: string\n    population: Integer\n    year: Integer\n}\n\nexport interface TimelineEntry {\n    date: ISODate\n    value: number\n}\n\nexport interface Timeline {\n    values: TimelineEntry[]\n    maxValue: number\n    total: number\n}\n\nexport interface LoadedTimeline extends Timeline {\n    countryName: string\n}\n\nexport interface PopulationTimeline extends Timeline {\n    totalPerCapita: number\n}\n\nexport interface CountryData {\n    name: string\n    population?: Integer\n    deaths: PopulationTimeline\n    cases: PopulationTimeline\n}\n\nexport const EmptyTimeline: Timeline = {\n    values: [],\n    maxValue: 0,\n    total: 0,\n}\n\nexport const accumulateTotals = (values: TimelineEntry[]): TimelineEntry[] =>\n    values.reduce<TimelineEntry[]>((acc, val, i) => {\n        if (i === 0) {\n            acc.push(val)\n        } else {\n            acc.push({ ...val, value: acc[i - 1].value + val.value })\n        }\n        return acc\n    }, [])\n","export const sum = (arr: number[]): number => arr.reduce((agg, v) => (agg += v), 0)\n","import { toJson } from '../utils/fetch-util'\nimport { Population } from '../types/Corona'\n\n// NOTE: This service seems to have political issues. For instance it seems to have noe entries for Palestine or Taiwan.\n\n// https://datahub.io/JohnSnowLabs/population-figures-by-country\nconst populationUrl =\n    'https://pkgstore.datahub.io/JohnSnowLabs/population-figures-by-country/population-figures-by-country-csv_json/data/2159fad77778c3b584f3d396593e0af6/population-figures-by-country-csv_json.json'\n\nconst ALTERNATE_COUNTRY_NAMES: { [key: string]: string } = {\n    Brunei: 'Brunei Darussalam',\n    Bahamas: 'Bahamas, The',\n    Congo: 'Congo, Rep.',\n    'Cape Verde': 'Cabo Verde',\n    'Democratic Republic of Congo': 'Congo, Dem. Rep.',\n    Egypt: 'Egypt, Arab Rep.',\n    Eritrea: 'Eritrea',\n    'Faeroe Islands': 'Faroe Islands',\n    Gambia: 'Gambia, The',\n    Iran: 'Iran, Islamic Rep.',\n    Kyrgyzstan: 'Kyrgyz Republic',\n    Laos: 'Lao PDR',\n    Macedonia: 'Macedonia, FYR',\n    Russia: 'Russian Federation',\n    'Saint Kitts and Nevis': 'St. Kitts and Nevis',\n    'Saint Lucia': 'St. Lucia',\n    'Saint Vincent and the Grenadines': 'St. Vincent and the Grenadines',\n    Slovakia: 'Slovak Republic',\n    'South Korea': 'Korea, Dem. People’s Rep.',\n    Syria: 'Syrian Arab Republic',\n    Timor: 'Timor-Leste',\n    Venezuela: 'Venezuela, RB',\n    'United States Virgin Islands': 'Virgin Islands (U.S.)',\n}\n\n/**\n * Transform world population from weird json struct to local data structure\n */\nconst lastYearsPopulation = (worldPopulation: any): Population[] =>\n    worldPopulation.map((country: any) => {\n        const lastYearKey = Object.keys(country).slice(-1)[0]\n        return {\n            country: country.Country,\n            population: country[lastYearKey],\n        }\n    })\n\nexport async function fetchWorldPopulation(): Promise<Population[]> {\n    return fetch(populationUrl).then(toJson).then(lastYearsPopulation)\n}\n\nexport const findPopulation = (countryName: string, populationData: Population[]): Population | undefined => {\n    const _findPop = (countryName: string) => populationData.find(({ country }) => country === countryName)\n    const population = _findPop(countryName)\n    if (population) {\n        return population\n    }\n    const alternateName = ALTERNATE_COUNTRY_NAMES[countryName]\n    return alternateName ? _findPop(alternateName) : undefined\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport './PerCountryPage.scss'\nimport { toCsv } from '../utils/fetch-util'\nimport { Population, CountryData, LoadedTimeline, EmptyTimeline } from '../types/Corona'\nimport { transpose } from '../utils/array-util'\nimport { sum } from '../utils/number-util'\nimport { toNumberOrZero } from '../utils/string-util'\nimport { fetchWorldPopulation, findPopulation } from '../data/population'\n\nconst urls = {\n    populationPerCountry:\n        'https://pkgstore.datahub.io/JohnSnowLabs/population-figures-by-country/population-figures-by-country-csv_json/data/2159fad77778c3b584f3d396593e0af6/population-figures-by-country-csv_json.json',\n    covidNewDeaths: 'https://covid.ourworldindata.org/data/ecdc/new_deaths.csv',\n    covidNewCases: 'https://covid.ourworldindata.org/data/ecdc/new_cases.csv',\n}\n\n/**\n * Transform corona data from csv file to local data structure\n */\nconst transformCovidCases = (csv: string[][]): LoadedTimeline[] => {\n    const [firstRow, ...data] = csv\n    const [, ...countries] = firstRow\n    const rowsWithData = data.filter((row) => row.length > 1)\n    const [dates, ...valuesPerCountry] = transpose(rowsWithData)\n\n    return countries\n        .map((country, i) => {\n            const values = valuesPerCountry[i].map((stringValue) => toNumberOrZero(stringValue))\n            return {\n                countryName: country,\n                values: dates.map((date, j) => ({\n                    date,\n                    value: values[j],\n                })),\n                maxValue: Math.max(...values),\n                total: sum(values),\n            }\n        })\n        .filter((c) => c.maxValue > 0)\n}\n\nconst verifyPopulation = (merged: CountryData[], populationData: Population[]): void => {\n    const countriesWithoutPopulation = merged.filter((c) => !c.population)\n    if (countriesWithoutPopulation.length > 0) {\n        console.warn(\n            'No population found for the following countries:',\n            countriesWithoutPopulation.map((c) => c.name)\n        )\n        // console.warn(\n        //     'You can fix this problem by making a mapping to one of theses:',\n        //     populationData.map((c) => c.country)\n        // )\n    }\n}\n\nconst mergeData = (\n    populationData: Population[],\n    newDeaths: LoadedTimeline[],\n    newCases: LoadedTimeline[]\n): CountryData[] => {\n    const decorated = newDeaths.map((countryDeaths) => {\n        const population = findPopulation(countryDeaths.countryName, populationData)\n        const countryCases = newCases.find((c) => c.countryName === countryDeaths.countryName) || EmptyTimeline\n        return {\n            population: population?.population,\n            name: countryDeaths.countryName,\n            deaths: {\n                ...countryDeaths,\n                totalPerCapita: population?.population ? countryDeaths.total / population.population : 0,\n            },\n            cases: {\n                ...countryCases,\n                totalPerCapita: population?.population ? (countryCases?.total || 0) / population.population : 0,\n            },\n        }\n    })\n    verifyPopulation(decorated, populationData)\n    return decorated\n}\n\nexport const usePageLoader = (): CountryData[] => {\n    const [populationData, setPopulationData] = useState<Population[]>([])\n    const [newDeaths, setNewDeaths] = useState<LoadedTimeline[]>([])\n    const [newCases, setNewCases] = useState<LoadedTimeline[]>([])\n\n    useEffect(() => {\n        fetchWorldPopulation().then(setPopulationData)\n    }, [])\n\n    useEffect(() => {\n        fetch(urls.covidNewDeaths).then(toCsv).then(transformCovidCases).then(setNewDeaths)\n    }, [])\n\n    useEffect(() => {\n        fetch(urls.covidNewCases).then(toCsv).then(transformCovidCases).then(setNewCases)\n    }, [])\n\n    return useMemo(() => {\n        return mergeData(populationData, newDeaths, newCases)\n    }, [populationData, newDeaths, newCases])\n}\n","export const transpose = <T>(arr: Array<T>[]): Array<T>[] => arr[0].map((_, c) => arr.map((r) => r[c]))\n\nexport const last = <T>(arr: Array<T>): T | undefined => (arr.length > 0 ? arr[arr.length - 1] : undefined)\n","import { Integer } from '../types/Types'\n\nexport const toNumberOrZero = (s?: string): Integer => parseInt(s || '0')\n","import React from 'react'\nimport { TimelineEntry } from '../types/Corona'\nimport './Minigraph.scss'\nimport { Integer } from '../types/Types'\n\nconst Minigraph: React.FC<{\n    timeline: TimelineEntry[]\n    barWidth?: Integer\n    graphClass: string\n    prefixText?: string\n}> = ({ timeline, barWidth = 3, prefixText, graphClass }) => {\n    const maxValue = Math.max(...timeline.map((v) => v.value)) || 0\n    const lastValue = timeline[timeline.length - 1]\n    const barBorder = 1\n    const graphHeight = 40\n    const graphWidth = timeline.length * (barWidth + barBorder)\n\n    return (\n        <div className={`minigraph ${graphClass}`}>\n            <div className=\"bars\" style={{ width: graphWidth }}>\n                {timeline.map(({ date, value }) => (\n                    <div key={date} className=\"date\" title={`${date}: ${value}`} style={{ marginRight: barBorder }}>\n                        <div className=\"bar\" style={{ height: (value / maxValue) * graphHeight }} />\n                    </div>\n                ))}\n            </div>\n            <div className=\"legend\">\n                {prefixText}\n                <span className=\"value\">{lastValue.value}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Minigraph\n","import React from 'react'\nimport './ProgressBar.scss'\nimport { Integer } from '../types/Types'\n\nconst ProgressBar: React.FC<{ width: Integer; progress: number }> = ({ width, progress }) => {\n    return (\n        <div className=\"progressbar\" style={{ width }}>\n            <div className=\"progress\" style={{ width: `${progress * 100}%` }} />\n        </div>\n    )\n}\n\nexport default ProgressBar\n","import React from 'react'\nimport { CountryData } from '../types/Corona'\nimport { Integer } from '../types/Types'\n\nconst formatCompact = (n?: Integer): string => {\n    if (!n) {\n        return 'unknown'\n    }\n    // @ts-ignore\n    return new Intl.NumberFormat('en-GB', { notation: 'compact', compactDisplay: 'short' }).format(n)\n}\n\nconst CountryHover: React.FC<{ country: CountryData }> = ({ country }) => {\n    return (\n        <div className=\"country-hover\">\n            <span className=\"foo\">Population: {formatCompact(country.population)}</span>\n            {/*,{' '}<span className=\"foo\">Total deaths: {formatCompact(country.total)}</span>*/}\n        </div>\n    )\n}\n\nexport default CountryHover\n","import React, { useContext, useMemo } from 'react'\nimport Minigraph from './Minigraph'\nimport ProgressBar from './ProgressBar'\nimport { accumulateTotals, CountryData, TimelineEntry } from '../types/Corona'\nimport { useHover } from '../hooks/hover'\nimport CountryHover from './CountryHover'\nimport { PerCountryPageContext } from '../pages/PerCountryPage'\n\nconst PerCountryTableRow: React.FC<{ country: CountryData; maxDeathsPerCapita: number }> = ({\n    country,\n    maxDeathsPerCapita,\n}) => {\n    const [rowRef, isHovered] = useHover()\n    const searchProps = useContext(PerCountryPageContext)\n\n    const deathsTotal = useMemo<TimelineEntry[]>(() => accumulateTotals(country.deaths.values), [country])\n    const casesTotal = useMemo<TimelineEntry[]>(() => accumulateTotals(country.cases.values), [country])\n    const numCols = searchProps.numHistoryDays\n\n    return (\n        <tr\n            // @ts-ignore\n            ref={rowRef}\n            className={country.name === 'World' ? 'the-world' : ''}\n            title={`Total deaths: ${country.deaths.total}, per million: ${Math.round(\n                (country.deaths.totalPerCapita || 0) * 1e6\n            )}`}\n        >\n            <td className=\"country-name\">\n                {country.name}\n                {isHovered && <CountryHover country={country} />}\n            </td>\n            {searchProps.showCasesTotal && (\n                <td>\n                    <Minigraph timeline={casesTotal.slice(-numCols)} barWidth={3} graphClass=\"cases\" />\n                </td>\n            )}\n            {searchProps.showCasesNew && (\n                <td>\n                    <Minigraph\n                        timeline={country.cases.values.slice(-numCols)}\n                        barWidth={3}\n                        graphClass=\"cases\"\n                        prefixText={'+'}\n                    />\n                </td>\n            )}\n            <td className=\"deaths-per-capita prl\">\n                {country.population ? (\n                    <div className=\"deaths-per-capita-bar\">\n                        <ProgressBar width={100} progress={country.deaths.totalPerCapita / maxDeathsPerCapita} />\n                        <div className=\"progressbar-overlay\">{Math.round(country.deaths.totalPerCapita * 1e6)}</div>\n                    </div>\n                ) : (\n                    <div className=\"info-small\">No population data</div>\n                )}\n            </td>\n            {searchProps.showDeathsTotal && (\n                <td>\n                    <Minigraph timeline={deathsTotal.slice(-numCols)} barWidth={3} graphClass=\"deaths\" />\n                </td>\n            )}\n            {searchProps.showDeathsNew && (\n                <td>\n                    <Minigraph\n                        timeline={country.deaths.values.slice(-numCols)}\n                        barWidth={3}\n                        graphClass=\"deaths\"\n                        prefixText={'+'}\n                    />\n                </td>\n            )}\n        </tr>\n    )\n}\n\nexport default PerCountryTableRow\n","// Copied from https://gist.github.com/gragland/a32d08580b7e0604ff02cb069826ca2f\nimport { useRef, useState, useCallback } from 'react'\n\nexport const useHover = () => {\n    const [value, setValue] = useState(false)\n\n    // Wrap in useCallback so we can use in dependencies below\n    const handleMouseOver = useCallback(() => setValue(true), [])\n    const handleMouseOut = useCallback(() => setValue(false), [])\n\n    // Keep track of the last node passed to callbackRef\n    // so we can remove its event listeners.\n    const ref = useRef()\n\n    // Use a callback ref instead of useEffect so that event listeners\n    // get changed in the case that the returned ref gets added to\n    // a different element later. With useEffect, changes to ref.current\n    // wouldn't cause a rerender and thus the effect would run again.\n    const callbackRef = useCallback(\n        (node) => {\n            if (ref.current) {\n                ref.current.removeEventListener('mouseover', handleMouseOver)\n                ref.current.removeEventListener('mouseout', handleMouseOut)\n            }\n\n            if (node) {\n                node.addEventListener('mouseover', handleMouseOver)\n                node.addEventListener('mouseout', handleMouseOut)\n            }\n        },\n        [handleMouseOver, handleMouseOut]\n    )\n\n    return [callbackRef, value]\n}\n","import React, { useCallback, useContext, useMemo } from 'react'\nimport { CountryData } from '../types/Corona'\nimport './PerCountryTable.scss'\nimport PerCountryTableRow from './PerCountryTableRow'\nimport { PerCountryPageContext } from '../pages/PerCountryPage'\n\nconst PerCountryTable: React.FC<{ countryData: CountryData[] }> = ({ countryData }) => {\n    const maxDeathsPerCapita = Math.max(...countryData.map((c) => c.deaths.totalPerCapita || 0))\n\n    const searchProps = useContext(PerCountryPageContext)\n\n    const countryFilter = useCallback(\n        (country: CountryData): boolean => {\n            if (searchProps.hideTinyCountries && (country.population || 0) < 200000) {\n                return false\n            }\n            return true\n        },\n        [searchProps]\n    )\n\n    const countrySorter = useCallback(\n        (a: CountryData, b: CountryData): number => {\n            if (searchProps.showWorldFirst) {\n                if (a.name === 'World') {\n                    return Number.MIN_SAFE_INTEGER\n                }\n                if (b.name === 'World') {\n                    return Number.MAX_SAFE_INTEGER\n                }\n            }\n            return b.deaths.totalPerCapita - a.deaths.totalPerCapita\n        },\n        [searchProps]\n    )\n\n    const countries = useMemo(() => {\n        return [...countryData].sort(countrySorter).filter(countryFilter)\n    }, [countryData, countryFilter, countrySorter])\n\n    return (\n        <table className=\"countries mtl\">\n            <thead>\n                <tr>\n                    <th></th>\n                    {searchProps.showCasesTotal && <th className=\"align-center\">Cases</th>}\n                    {searchProps.showCasesNew && <th className=\"align-center\">Cases</th>}\n                    <th>Total Deaths</th>\n                    {searchProps.showDeathsTotal && <th className=\"align-center\">Deaths</th>}\n                    {searchProps.showDeathsNew && <th className=\"align-center\">Deaths</th>}\n                </tr>\n                <tr>\n                    <th>Location</th>\n                    {searchProps.showCasesTotal && <th className=\"align-center\">total</th>}\n                    {searchProps.showCasesNew && <th className=\"align-center\">new</th>}\n                    <th>per mill capita</th>\n                    {searchProps.showDeathsTotal && <th className=\"align-center\">total</th>}\n                    {searchProps.showDeathsNew && <th className=\"align-center\">new</th>}\n                </tr>\n            </thead>\n            <tbody>\n                {countries.map((country) => (\n                    <PerCountryTableRow key={country.name} country={country} maxDeathsPerCapita={maxDeathsPerCapita} />\n                ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default PerCountryTable\n","import React, { useContext } from 'react'\nimport { Button, Form, Slider, Switch } from 'antd'\nimport { PerCountryPageContext } from '../pages/PerCountryPage'\n\nexport const SearchPropsDefault = {\n    showWorldFirst: false,\n    hideTinyCountries: true,\n    showDeathsNew: true,\n    showDeathsTotal: true,\n    showCasesNew: false,\n    showCasesTotal: false,\n    numHistoryDays: 30,\n}\n\nexport type SearchProps = typeof SearchPropsDefault\n\nconst SearchPropsForm: React.FC<{\n    updateSearchProps: (p: SearchProps) => void\n    onCloseDrawer?: () => void\n}> = ({ updateSearchProps, onCloseDrawer = () => {} }) => {\n    const searchProps = useContext(PerCountryPageContext)\n\n    const updateProp = (prop: keyof SearchProps) => (value: SearchProps[keyof SearchProps] | [number, number]): void =>\n        updateSearchProps({ ...searchProps, [prop]: value })\n\n    return (\n        <Form>\n            <Form.Item label=\"Show world first\">\n                <Switch checked={searchProps.showWorldFirst} onChange={updateProp('showWorldFirst')} />\n            </Form.Item>\n            <Form.Item label=\"Hide tiny countries\">\n                <Switch checked={searchProps.hideTinyCountries} onChange={updateProp('hideTinyCountries')} />\n            </Form.Item>\n            <Form.Item label=\"Show new deaths\">\n                <Switch checked={searchProps.showDeathsNew} onChange={updateProp('showDeathsNew')} />\n            </Form.Item>\n            <Form.Item label=\"Show total deaths\">\n                <Switch checked={searchProps.showDeathsTotal} onChange={updateProp('showDeathsTotal')} />\n            </Form.Item>\n            <Form.Item label=\"Show new cases\">\n                <Switch checked={searchProps.showCasesNew} onChange={updateProp('showCasesNew')} />\n            </Form.Item>\n            <Form.Item label=\"Show total cases\">\n                <Switch checked={searchProps.showCasesTotal} onChange={updateProp('showCasesTotal')} />\n            </Form.Item>\n            <Form.Item label=\"Days of history\">\n                <Slider min={1} max={60} value={searchProps.numHistoryDays} onChange={updateProp('numHistoryDays')} />\n            </Form.Item>\n            <Button type=\"primary\" onClick={onCloseDrawer}>\n                Close\n            </Button>\n        </Form>\n    )\n}\n\nexport default SearchPropsForm\n","import React, { useState } from 'react'\nimport './PerCountryPage.scss'\nimport { usePageLoader } from './PerCountryPageLoader'\nimport PerCountryTable from '../components/PerCountryTable'\nimport { Button, Drawer } from 'antd'\nimport SearchPropsForm, { SearchProps, SearchPropsDefault } from '../components/SearchPropsForm'\nimport { last } from '../utils/array-util'\n\nexport const PerCountryPageContext = React.createContext(SearchPropsDefault)\n\nconst PerCountryPage = () => {\n    const countryData = usePageLoader()\n    const [drawerVisible, setDrawerVisible] = useState<boolean>(false)\n    const [searchProps, setSearchProps] = useState<SearchProps>(SearchPropsDefault)\n\n    const lastLoaded = countryData.length > 0 && last(countryData[0].deaths.values)?.date\n\n    const onCloseDrawer = () => setDrawerVisible(false)\n\n    return (\n        <PerCountryPageContext.Provider value={searchProps}>\n            <div className=\"per-country-page-header pll\">\n                <h1 className=\"mbs\">Coronavirus - deaths per capita</h1>\n                <div className=\"github-source mam\">\n                    <a href=\"https://github.com/trygvea/corona-stats\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        Source on <img src=\"/corona-stats/GitHub-Mark-32px.png\" height={24} alt=\"github\"></img>\n                        <img src=\"/corona-stats/GitHub_Logo.png\" height={24} alt=\"github\"></img>\n                    </a>\n                </div>\n            </div>\n\n            <div className=\"per-country-page mll mtm\">\n                <p className=\"info-text\">\n                    There are many small countries that are hit much harder than the big countries. This graph shows\n                    coronavirus cases per country ordered per capita.\n                </p>\n\n                <p className=\"info-small mbxs\">\n                    Using data from{' '}\n                    <a href=\"https://ourworldindata.org/coronavirus-source-data\">\n                        ourworldindata.org/coronavirus-source-data\n                    </a>{' '}\n                    and{' '}\n                    <a href=\"https://datahub.io/JohnSnowLabs/population-figures-by-country\">datahub.io/JohnSnowLabs</a>.\n                    <br />\n                    New data from the day before are present every day at 13:00 CET, according to{' '}\n                    <a href=\"https://ourworldindata.org/coronavirus\">ourworldindata.org/coronavirus</a>\n                    <br />\n                    {lastLoaded && `This data was loaded ${lastLoaded}`}\n                </p>\n\n                <Button type=\"primary\" onClick={() => setDrawerVisible(true)}>\n                    Configure\n                </Button>\n                <Drawer\n                    title=\"Search details\"\n                    placement=\"left\"\n                    closable={true}\n                    onClose={onCloseDrawer}\n                    visible={drawerVisible}\n                    width={300}\n                >\n                    <SearchPropsForm updateSearchProps={setSearchProps} onCloseDrawer={onCloseDrawer} />\n                </Drawer>\n\n                <PerCountryTable countryData={countryData} />\n            </div>\n        </PerCountryPageContext.Provider>\n    )\n}\n\nexport default PerCountryPage\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport PerCountryPage from './pages/PerCountryPage'\n\nconst App = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\">\n                <PerCountryPage />\n            </Route>\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}